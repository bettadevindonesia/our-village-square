import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { FileText, Download, Eye, Printer } from "lucide-react";
import jsPDF from "jspdf";

const LetterGenerator = () => {
  const [formData, setFormData] = useState({
    letterType: "",
    recipientName: "",
    recipientAddress: "",
    senderName: "",
    senderAddress: "",
    subject: "",
    content: "",
    date: new Date().toISOString().split('T')[0]
  });
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const { toast } = useToast();

  const letterTypes = [
    { value: "official", label: "Official Village Letter" },
    { value: "complaint", label: "Complaint Letter" },
    { value: "request", label: "Service Request" },
    { value: "invitation", label: "Event Invitation" },
    { value: "notification", label: "Official Notification" },
    { value: "general", label: "General Correspondence" }
  ];

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const margin = 20;
    let yPosition = 30;

    // Village Header
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text("Village Administration", margin, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text("Official Village Correspondence", margin, yPosition);
    yPosition += 20;

    // Date
    doc.text(`Date: ${new Date(formData.date).toLocaleDateString()}`, pageWidth - margin - 50, 30);
    yPosition += 10;

    // Sender Information
    if (formData.senderName || formData.senderAddress) {
      doc.setFont("helvetica", "bold");
      doc.text("From:", margin, yPosition);
      yPosition += 8;
      doc.setFont("helvetica", "normal");
      
      if (formData.senderName) {
        doc.text(formData.senderName, margin, yPosition);
        yPosition += 6;
      }
      if (formData.senderAddress) {
        const addressLines = formData.senderAddress.split('\n');
        addressLines.forEach(line => {
          doc.text(line, margin, yPosition);
          yPosition += 6;
        });
      }
      yPosition += 10;
    }

    // Recipient Information
    if (formData.recipientName || formData.recipientAddress) {
      doc.setFont("helvetica", "bold");
      doc.text("To:", margin, yPosition);
      yPosition += 8;
      doc.setFont("helvetica", "normal");
      
      if (formData.recipientName) {
        doc.text(formData.recipientName, margin, yPosition);
        yPosition += 6;
      }
      if (formData.recipientAddress) {
        const addressLines = formData.recipientAddress.split('\n');
        addressLines.forEach(line => {
          doc.text(line, margin, yPosition);
          yPosition += 6;
        });
      }
      yPosition += 15;
    }

    // Subject
    if (formData.subject) {
      doc.setFont("helvetica", "bold");
      doc.text("Subject: ", margin, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(formData.subject, margin + 25, yPosition);
      yPosition += 15;
    }

    // Letter Content
    if (formData.content) {
      doc.setFont("helvetica", "normal");
      const contentLines = doc.splitTextToSize(formData.content, pageWidth - (margin * 2));
      contentLines.forEach((line: string) => {
        if (yPosition > 270) { // Check if we need a new page
          doc.addPage();
          yPosition = 30;
        }
        doc.text(line, margin, yPosition);
        yPosition += 6;
      });
    }

    // Footer
    yPosition += 20;
    if (yPosition > 270) {
      doc.addPage();
      yPosition = 30;
    }
    doc.setFont("helvetica", "italic");
    doc.setFontSize(10);
    doc.text("Generated by Village Portal", margin, yPosition);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, margin, yPosition + 8);

    // Save the PDF
    const fileName = `${formData.letterType || 'letter'}_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);

    toast({
      title: "PDF Generated!",
      description: `Your letter has been saved as ${fileName}`,
    });
  };

  const handlePreview = () => {
    if (!formData.content.trim()) {
      toast({
        title: "Missing Content",
        description: "Please add some content to preview the letter.",
        variant: "destructive"
      });
      return;
    }
    setIsPreviewMode(!isPreviewMode);
  };

  const resetForm = () => {
    setFormData({
      letterType: "",
      recipientName: "",
      recipientAddress: "",
      senderName: "",
      senderAddress: "",
      subject: "",
      content: "",
      date: new Date().toISOString().split('T')[0]
    });
    setIsPreviewMode(false);
  };

  return (
    <div className="py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold mb-4">Letter Generator</h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Create professional letters and documents with the official village letterhead. 
            Generate and download as PDF.
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          {!isPreviewMode ? (
            /* Letter Form */
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <FileText className="w-5 h-5 mr-2 text-primary" />
                  Create New Letter
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="letterType">Letter Type</Label>
                    <Select value={formData.letterType} onValueChange={(value) => 
                      setFormData(prev => ({ ...prev, letterType: value }))
                    }>
                      <SelectTrigger>
                        <SelectValue placeholder="Select letter type" />
                      </SelectTrigger>
                      <SelectContent>
                        {letterTypes.map((type) => (
                          <SelectItem key={type.value} value={type.value}>
                            {type.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="date">Date</Label>
                    <Input
                      id="date"
                      name="date"
                      type="date"
                      value={formData.date}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6">
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold">Sender Information</h3>
                    <div className="space-y-2">
                      <Label htmlFor="senderName">Sender Name</Label>
                      <Input
                        id="senderName"
                        name="senderName"
                        value={formData.senderName}
                        onChange={handleInputChange}
                        placeholder="Your full name"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="senderAddress">Sender Address</Label>
                      <Textarea
                        id="senderAddress"
                        name="senderAddress"
                        value={formData.senderAddress}
                        onChange={handleInputChange}
                        placeholder="Your address (multiple lines)"
                        className="min-h-[100px]"
                      />
                    </div>
                  </div>

                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold">Recipient Information</h3>
                    <div className="space-y-2">
                      <Label htmlFor="recipientName">Recipient Name</Label>
                      <Input
                        id="recipientName"
                        name="recipientName"
                        value={formData.recipientName}
                        onChange={handleInputChange}
                        placeholder="Recipient's full name"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="recipientAddress">Recipient Address</Label>
                      <Textarea
                        id="recipientAddress"
                        name="recipientAddress"
                        value={formData.recipientAddress}
                        onChange={handleInputChange}
                        placeholder="Recipient's address (multiple lines)"
                        className="min-h-[100px]"
                      />
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="subject">Subject</Label>
                  <Input
                    id="subject"
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                    placeholder="Letter subject or title"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="content">Letter Content</Label>
                  <Textarea
                    id="content"
                    name="content"
                    value={formData.content}
                    onChange={handleInputChange}
                    placeholder="Write your letter content here..."
                    className="min-h-[300px]"
                  />
                </div>

                <div className="flex flex-wrap gap-4">
                  <Button onClick={handlePreview} variant="outline">
                    <Eye className="w-4 h-4 mr-2" />
                    Preview Letter
                  </Button>
                  <Button onClick={generatePDF} disabled={!formData.content.trim()}>
                    <Download className="w-4 h-4 mr-2" />
                    Generate PDF
                  </Button>
                  <Button onClick={resetForm} variant="ghost">
                    Reset Form
                  </Button>
                </div>
              </CardContent>
            </Card>
          ) : (
            /* Letter Preview */
            <Card>
              <CardHeader className="border-b">
                <div className="flex justify-between items-center">
                  <CardTitle className="flex items-center">
                    <Eye className="w-5 h-5 mr-2 text-primary" />
                    Letter Preview
                  </CardTitle>
                  <div className="flex gap-2">
                    <Button onClick={generatePDF} size="sm">
                      <Download className="w-4 h-4 mr-2" />
                      Download PDF
                    </Button>
                    <Button onClick={handlePreview} variant="outline" size="sm">
                      Edit Letter
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="p-8">
                <div className="max-w-2xl mx-auto space-y-6 font-serif">
                  {/* Letterhead */}
                  <div className="text-center border-b pb-4">
                    <h2 className="text-xl font-bold">Village Administration</h2>
                    <p className="text-sm text-muted-foreground">Official Village Correspondence</p>
                  </div>

                  {/* Date */}
                  <div className="text-right">
                    <p>Date: {new Date(formData.date).toLocaleDateString()}</p>
                  </div>

                  {/* Sender */}
                  {(formData.senderName || formData.senderAddress) && (
                    <div>
                      <p className="font-semibold">From:</p>
                      {formData.senderName && <p>{formData.senderName}</p>}
                      {formData.senderAddress && (
                        <div>
                          {formData.senderAddress.split('\n').map((line, index) => (
                            <p key={index}>{line}</p>
                          ))}
                        </div>
                      )}
                    </div>
                  )}

                  {/* Recipient */}
                  {(formData.recipientName || formData.recipientAddress) && (
                    <div>
                      <p className="font-semibold">To:</p>
                      {formData.recipientName && <p>{formData.recipientName}</p>}
                      {formData.recipientAddress && (
                        <div>
                          {formData.recipientAddress.split('\n').map((line, index) => (
                            <p key={index}>{line}</p>
                          ))}
                        </div>
                      )}
                    </div>
                  )}

                  {/* Subject */}
                  {formData.subject && (
                    <div>
                      <p><span className="font-semibold">Subject:</span> {formData.subject}</p>
                    </div>
                  )}

                  {/* Content */}
                  <div className="whitespace-pre-wrap leading-relaxed">
                    {formData.content}
                  </div>

                  {/* Footer */}
                  <div className="border-t pt-4 text-xs text-muted-foreground">
                    <p>Generated by Village Portal</p>
                    <p>Generated on: {new Date().toLocaleString()}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default LetterGenerator;